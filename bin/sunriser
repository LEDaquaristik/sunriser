#!/usr/bin/env perl
# PODNAME: sunriser
# ABSTRACT: SunRiser CLI tool

$|=1;

use strict;
use warnings;

use FindBin;
use lib $FindBin::Dir . "/../lib";

use DDP;
use Path::Tiny;
use SunRiser;
use bytes;
use Carp qw( croak );

my $host = shift @ARGV;
unless ($host) {
  p(SunRiser->finder);
  exit 0;
}
my $command = shift @ARGV || "state";
my @args = @ARGV;

my $sr = SunRiser->new( host => $host );

if (lc($command) eq 'firmware') {
  if (scalar @args == 0) {
    my $res = $sr->firmware_info;
    p($sr->res_mp_body($res));
  } elsif (scalar @args == 1) {
    print "Installing firmware ".$args[0].".... ";
    my $firmware = scalar path($args[0])->slurp_raw;
    if ($sr->update_firmware($firmware)) {
      print "success!\n";
      print "Waiting for restart of SunRiser... ";
      print "waited ".$sr->wait_for." seconds\n";
    } else {
      print "FAILURE!!!!\n";
      exit 1;
    }
  } else {
    croak "Too many args";
  }
} elsif ($command eq 'ok') {
  if (scalar @args == 0) {
    if ($sr->ok) {
      print "OK\n";
    } else {
      print "ERROR NOT OK\n";
      exit 1;
    }
  } else {
    croak "Too many args";
  }
} elsif ($command eq 'factory') {
  if (scalar @args == 1) {
    print "Installing factory ".$args[0].".... ";
    my $factory = scalar path($args[0])->slurp_raw;
    if ($sr->update_factory($factory)) {
      print "success!\n";
    } else {
      print "FAILURE!!!!\n";
      exit 1;
    }
  } else {
    croak "Too few or too many args";
  }
} elsif ($command eq 'led') {
  if (scalar @args == 2) {
    my $arg = { pwms => { "".$args[0], $args[1]+0 } };
    print "Setting PWM ".$args[0]." to ".$args[1].": ".($sr->call_mp('PUT','state',$arg)->is_success ? "OK" : "FAILURE!!!")."\n";
  } else {
    croak "Too few or too many args";
  }
} elsif ($command eq 'state') {
  if (scalar @args == 0) {
    p($sr->state);
  } else {
    croak "Too many args";
  }
} elsif ($command eq 'settime') {
  if (scalar @args == 1) {
    print $sr->state({ time => 0+$args[0] }) ? 'OK' : 'NOT OK';
  } else {
    croak "Too few or too many args";
  }
} elsif ($command eq 'bootload') {
  if (scalar @args == 0) {
    p($sr->bootloader_info);
  } else {
    croak "Too many args";
  }
} elsif ($command eq 'reboot') {
  if (scalar @args == 0) {
    if ($sr->reboot) {
      print "Reboot\n";
    } else {
      print "Reboot failed!\n";
      exit 1;
    }
  } else {
    croak "Too many args";
  }
}

exit 0;