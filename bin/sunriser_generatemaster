#!/usr/bin/env perl
# PODNAME: sunriser_generatemaster
# ABSTRACT: Generate master static web files [SOON REPLACED]

$|=1;

use strict;
use warnings;

use FindBin;
use lib $FindBin::Dir . "/../lib";
use SunRiser::CDB;
use SunRiser::Config;
use Data::MessagePack;
use DDP;
use Path::Tiny;
use JSON::MaybeXS;
use File::ShareDir::ProjectDistDir;
use File::Copy;
use Carp qw( croak );

my $dir = shift @ARGV || '.';
my $p = path($dir);

my $share = path(dist_dir('SunRiser'));

my $files = $share->child('master/')->iterator({
  recurse         => 1,
  follow_symlinks => 1,
});

while (my $p = $files->()) {
  copy($p,path($dir)) or die "Copy failed: $!";
}

my %other = (
  'web/js/jquery-1.12.4.min.js' => 'jquery-1.12.4.min.js',
  'web/js/moment-2.22.2.min.js' => 'moment-2.22.2.min.js',
  'web/js/moment-locale-de.js' => 'moment-locale-de.js',
  'web/js/msgpack-0.1.26.min.js' => 'msgpack-0.1.26.min.js',
  'web/js/jquery.ajax-retry.min.js' => 'jquery.ajax-retry.min.js',
  'web/js/jquery-ajax-blob-arraybuffer.js' => 'jquery-ajax-blob-arraybuffer.js',
  'web/img/background.jpg' => 'background.jpg',
  'web/img/ajaxload.gif' => 'ajaxload.gif',
);

for my $from (keys %other) {
  copy($share->child($from),path($dir)->child($other{$from})) or die "Copy failed: $!";  
}

my $config = SunRiser::Config->new;

my %images;

my $iter = $p->iterator;
while (my $file = $iter->()) {
  next if $file->is_dir;
  next unless $file =~ /\.bee/;
  my $cdb = SunRiser::CDB->new( filename => $file, config => $config );
  my $info = $cdb->get_firmware_info;
  if ($info) {
    $images{$file} = $info;
    $info->{url} = $file->stringify;
  }
}

my @imageslist;

for (sort { $images{$b}->{timestamp} <=> $images{$a}->{timestamp} } keys %images) {
  push @imageslist, $images{$_};
}

if (%images) {
  path('sunriser_firmware_images.json')->spew(encode_json(\@imageslist));
} else {
  croak "No images found";
}

exit 0;
